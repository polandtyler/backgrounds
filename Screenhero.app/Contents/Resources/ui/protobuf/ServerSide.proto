package ServerSideProtocol;

enum AgentMessageType
{
    HelloMessage = 0;
    InviteUserRequest = 1;
    InviteUserResponse = 2;
    RegisterUserRequest = 3;
    UserInfoRequest = 4;
    UserInfoResponse = 5;
    SetUserInfoRequest = 6;
    BulkUserInfoRequest = 7;
    BulkUserInfoResponse = 8;
    GetJidRequest = 9;
    GetJidResponse = 10;
    GetFirstRunLoginRequest = 11;
    GetFirstRunLoginResponse = 12;
    StatusResponse = 13;
    DidXMPPInviteUserNotification = 14;
    AppFeedback = 15;
    UserInfoV2Request = 16;
    UserInfoV2Response = 17;    
    JoinIndividualRequest = 18;
    ShareInitiatedAgentNagRequest = 19;
    NagResponse = 20;
    RegisterLaunch = 21;
    BulkInviteUserRequest = 22;
    BulkInviteUserResponse = 23;
};

message AuthMessageFragment
{
    optional string email = 1;
    optional string bareJID = 2; // either email OR bareJID is acceptable
    optional string password = 3;
};

message AgentHelloMessage
{
    optional AgentMessageType type = 1 [default = HelloMessage];
    optional uint64 version = 3;
    optional uint64 session_num = 4;
};

message AgentDidXMPPInviteUserNotification
{
    optional AgentMessageType type = 1 [default = DidXMPPInviteUserNotification];
    optional string invitedEmail = 3;
    optional string originBuddyName = 4;
    optional string originBuddyEmail = 5;
}

message AgentInviteUserRequest
{
    optional AgentMessageType type = 1 [default = InviteUserRequest];
    optional string invitedEmail = 3;
    optional string originBuddyName = 4;
    optional string originBuddyEmail = 5;
    optional string invitedName = 6;
    optional bool dontSendEmail = 7 [default = false];
}

message AgentInviteUserResponse
{
    optional AgentMessageType type = 1 [default = InviteUserResponse];
    optional string invitedJID = 3;
    optional string invitedURL = 4;
}

message AgentRegisterUserRequest
{
    optional AgentMessageType type = 1 [default = RegisterUserRequest];
    optional string buddyEmail = 3;
    optional string buddyName = 4;
    optional string buddyPassword = 5;
};

message AgentUserInfoRequest
{
    optional AgentMessageType type = 1 [default = UserInfoRequest];
    optional string buddyEmail = 3;
    optional string buddyJID = 4;
    optional bool wantBuddyProfilePic = 5 [default = false];
    optional AuthMessageFragment auth = 6;
};

message AgentUserInfoResponse
{
    enum PaymentType
    {
        //users in unknown standing
        NoBillingData = 0;
        //users in good standing
        Active = 1;
        Trialing = 2;
        GracePeriod = 3;
        //users in bad standing
        Delinquent = 4;
        TrialExpired = 5;
        Canceled = 6;
        //in good standing again, hehehe.
        CancelPending = 7;
    };

    optional AgentMessageType type = 1 [default = UserInfoResponse];
    optional string buddyEmail = 3;
    optional string buddyName = 4;
    optional string buddyJID = 5;
    optional string buddyNotes = 6;
    optional bytes buddyProfilePic = 7;
    optional string joinURL = 8;
    optional PaymentType paymentType = 9;
    optional string buddyProfilePicURL = 10;
};

message AgentBulkUserInfoRequest
{
    optional AgentMessageType type = 1 [default = BulkUserInfoRequest];
    repeated AgentUserInfoRequest requests = 3;
};

message AgentBulkUserInfoResponse
{
    optional AgentMessageType type = 1 [default = BulkUserInfoResponse];
    repeated AgentUserInfoResponse responses = 3;
};

message AgentSetUserInfoRequest
{
    optional AgentMessageType type = 1 [default = SetUserInfoRequest];
    optional string buddyJID = 3;
    optional string buddyName = 4;
    optional bytes buddyProfilePic = 5;
    optional string buddyPwd = 6;
    optional AuthMessageFragment auth = 7;
};

message AgentGetJidRequest
{
    optional AgentMessageType type = 1 [default = GetJidRequest];
    optional string buddyEmail = 3;
};

message AgentGetJidResponse
{
    optional AgentMessageType type = 1 [default = GetJidResponse];
    optional string buddyEmail = 3;
    optional string buddyJID = 4;
};

message AgentGetFirstRunLoginRequest
{
    optional AgentMessageType type = 1 [default = GetFirstRunLoginRequest];
    optional string code = 3;
    optional bool shouldDestroyCode = 4 [default = true];
};

message AgentGetFirstRunLoginResponse
{
    optional AgentMessageType type = 1 [default = GetFirstRunLoginResponse];
    optional string buddyEmail = 3;
    optional string buddyPassword = 4;
    optional string buddyFullName = 5;
};

message AgentStatusResponse
{
    enum Status
    {
        NoError = 0;
        TimeOut = 1;
        Error = 2;
        AuthFailure = 3;
    };

    optional AgentMessageType type = 1 [default = StatusResponse];
    optional Status status = 3;
    optional string errorDesc = 4;
};

message AgentAppFeedback
{
    optional AgentMessageType type = 1 [default = AppFeedback];
    optional string email = 2;
    optional string userNick = 3;
    optional string feedbackRating = 4;
    optional string feedbackMsg = 5;
};

message AgentUserInfoV2Request
{
    optional AgentMessageType type = 1 [default = UserInfoV2Request];
    optional string buddyEmail = 2;
    optional string buddyJID = 3;
    optional bool wantBuddyProfilePic = 4 [default = false];
    optional AuthMessageFragment auth = 5;
};

message AgentUserInfoV2Response
{
    optional AgentMessageType type = 1 [default = UserInfoV2Response];
    optional string buddyEmail = 3;
    optional string buddyName = 4;
    optional string buddyJID = 5;
    optional string buddyNotes = 6;
    optional bytes buddyProfilePic = 7;
    optional AgentStatusResponse status = 8;
    optional string plan = 9; 
};

message AgentJoinIndividualRequest
{
    optional AgentMessageType type = 1 [default = JoinIndividualRequest];
    optional string invitedEmail = 2;
    optional string originEmail = 3;
}

message AgentShareInitiatedAgentNagRequest
{
    optional AgentMessageType type = 1 [default = ShareInitiatedAgentNagRequest];
    optional string email = 2;
    optional string sharedBuddyEmail = 3;
}

message AgentNagResponse
{
    optional AgentMessageType type = 1 [default = NagResponse];
    optional bool shouldShowNag = 2;
    optional string nagURL = 3;
    optional int32 nagWidth = 4;
    optional int32 nagHeight = 5;
}

message AgentRegisterLaunch
{
    optional AgentMessageType type = 1 [default = RegisterLaunch];
    optional string launchId = 2;
}

message AgentBulkInviteUserRequest
{
    optional AgentMessageType type = 1 [default = BulkInviteUserRequest];
    repeated AgentInviteUserRequest requests = 2;
    optional AuthMessageFragment auth = 3;
};

message AgentBulkInviteUserResponse
{
    optional AgentMessageType type = 1 [default = BulkInviteUserResponse];
    repeated AgentInviteUserResponse responses = 2;
};
